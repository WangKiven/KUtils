<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-sdk tools:overrideLibrary="androidx.camera.camera2,androidx.camera.core" />

    <uses-permission android:name="android.permission.CALL_PHONE" />
    <uses-permission android:name="android.permission.SET_WALLPAPER" />
    <uses-permission android:name="android.permission.BIND_WALLPAPER" />
    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
    <uses-permission android:name="android.permission.SYSTEM_OVERLAY_WINDOW" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.CAMERA" />
    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.KILL_BACKGROUND_PROCESSES" />
    <uses-permission
        android:name="android.permission.FORCE_BACK"
        tools:ignore="ProtectedPermissions" />

    <uses-feature android:name="android.software.live_wallpaper" />
    <!-- 0x00020000  0x00030000  0x00030002 等 -->
    <uses-feature
        android:glEsVersion="0x00020000"
        android:required="true" />
    <!-- 讯飞 -->
    <!-- 获取手机录音机使用权限，听写、识别、语义理解需要用到此权限 -->
    <uses-permission android:name="android.permission.RECORD_AUDIO" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /> <!-- 获取当前wifi状态 -->
    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" /> <!-- 允许程序改变网络连接状态 -->
    <uses-permission android:name="android.permission.CHANGE_NETWORK_STATE" /> <!-- 读取手机信息权限 -->
    <uses-permission android:name="android.permission.READ_PHONE_STATE" /> <!-- 读取联系人权限，上传联系人需要用到此权限 -->
    <uses-permission android:name="android.permission.READ_CONTACTS" /> <!-- 外存储写权限，构建语法需要用到此权限 -->
    <uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
<!--    <uses-permission android:name="android.permission.READ_CONTACTS" />-->
    <!-- <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/> -->
    <!-- 外存储读权限，构建语法需要用到此权限 -->
    <!-- <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/> -->
    <!-- 配置权限，用来记录应用配置信息 -->
    <uses-permission android:name="android.permission.WRITE_SETTINGS" /> <!-- 手机定位信息，用来为语义等功能提供定位，提供更精准的服务 -->
    <!-- 定位信息是敏感信息，可通过Setting.setLocationEnable(false)关闭定位请求 -->
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
    <uses-permission android:name="com.huawei.android.launcher.permission.CHANGE_BADGE" />
<!--    <uses-permission android:name="android.permission.CALL_PHONE" /> &lt;!&ndash; 指纹识别，低版本需要 &ndash;&gt;-->
    <uses-permission android:name="android.permission.USE_FINGERPRINT" /> <!-- 生物识别，高版本需要 -->
    <uses-permission android:name="android.permission.USE_BIOMETRIC" /> <!-- 通讯录 -->
<!--    <uses-permission android:name="android.permission.READ_CONTACTS" />-->
    <uses-permission android:name="android.permission.WRITE_CONTACTS" /> <!-- 闹钟 -->
    <uses-permission android:name="com.android.alarm.permission.SET_ALARM" /> <!-- 日历 -->
    <uses-permission android:name="android.permission.READ_CALENDAR" />
    <uses-permission android:name="android.permission.WRITE_CALENDAR" />
    <uses-permission android:name="android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS" />
    <uses-permission android:name="android.permission.READ_SMS" />
    <!-- 保活权限 -->
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
    <uses-permission android:name="android.permission.BIND_JOB_SERVICE" />
    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
    <!-- 小米推送 -->
    <!--<uses-permission android:name="android.permission.GET_TASKS" />
    <uses-permission android:name="android.permission.VIBRATE" />-->
    <permission
        android:name="com.kiven.sample.permission.MIPUSH_RECEIVE"
        android:protectionLevel="signature" /> <!--这里com.xiaomi.mipushdemo改成app的包名-->
    <uses-permission android:name="com.kiven.sample.permission.MIPUSH_RECEIVE" /><!--这里com.xiaomi.mipushdemo改成app的包名-->

    <!-- ARCore 权限 -->
    <!--<uses-permission android:name="android.permission.CAMERA" />-->
    <uses-feature android:name="android.hardware.camera" />

    <!-- 查看所有App信息 https://developer.android.google.cn/training/basics/intents/package-visibility -->
    <uses-permission android:name="android.permission.QUERY_ALL_PACKAGES" />

    <!--震动测试-->
    <uses-permission android:name="android.permission.VIBRATE" />


    <!-- WiFi 直连 -->
    <uses-feature
        android:name="android.hardware.wifi.direct"
        android:required="true" />

    <!-- WiFi rtt -->
    <uses-feature android:name="android.hardware.wifi.rtt" />

    <!-- WiFi 感知，自己拼接的，不知道有没有用 -->
    <uses-feature android:name="android.hardware.wifi.aware" />

    <!-- TextToSpeech 需要TTS_SERVICE权限，没配置也没出现问题，但是在其他app没配置就不行，这里就也加上 -->
    <queries>
        <intent>
            <action android:name="android.intent.action.TTS_SERVICE" />
        </intent>
    </queries>


    <!--设置壁纸的权限-->
    <uses-permission android:name="android.permission.SET_WALLPAPER"/>

    <application
        android:name=".App"
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:networkSecurityConfig="@xml/network_security_config"
        android:resizeableActivity="true"
        android:supportsRtl="true"
        android:theme="@style/AppTheme.NoActionBar"
        tools:ignore="UnusedAttribute"
        tools:replace="icon,label,theme">

        <meta-data
            android:name="com.google.ar.core"
            android:value="optional" /><!-- ARCore 配置 optional：可选AR，required:必须AR-->

        <activity
            android:name=".noti.ClickNotiActivity"
            android:exported="false">
            <intent-filter>
                <!--firebase采用action启动，服务器又不能设置category, 所以需要一个单独的 intent-filter-->
                <!-- 隐式启动：https://blog.csdn.net/Leo_Liang_jie/article/details/92836838 -->
                <action android:name="com.push.action.VIEW" />
                <category android:name="android.intent.category.DEFAULT" />
            </intent-filter>
            <intent-filter>
                <action android:name="android.intent.action.VIEW" />
                <category android:name="android.intent.category.DEFAULT" />
                <!--指定在浏览器中的动作。当 Intent 在浏览器中被引发，都会被指定成 BROWSABLE 种类。 -->
                <!-- 有这个的话，就不能在桌面上显示了 -->
                <category android:name="android.intent.category.BROWSABLE" />
                <data
                    android:host="kiven.test.app"
                    android:path="/main"
                    android:scheme="sample" />
            </intent-filter>
        </activity>

        <meta-data
            android:name="roboguice.annotations.packages"
            android:value="com.kiven.sample" />

        <activity
            android:name=".LaunchActivity"
            android:exported="true">
            <intent-filter>

                <!-- 应用入口, 多个activity都配置了android.intent.action.MAIN的话，启动App的时候那个在清单文件前面，就启动那个 -->
                <!-- 个人猜测，寻找可能的activity时，按照manifest配置从上到下读取，直到寻找到第一个符合要求的activity -->
                <action android:name="android.intent.action.MAIN" />
                <!-- 用于显示用户的数据。比较通用，会根据用户的数据类型打开相应的Activity。比如 tel:13400010001打开拨号程序。 -->
                <action android:name="android.intent.action.VIEW" />

                <!-- LAUNCHER 表示目标Activity是应用程序中最优先被执行的Activity。有这一个，桌面才会有入口。  -->
                <category android:name="android.intent.category.LAUNCHER" />
                <!-- 可以隐式启动，如果有android.intent.category.LAUNCHER ，可不用android.intent.category.DEFAULT -->
                <category android:name="android.intent.category.DEFAULT" />
            </intent-filter>
        </activity>
        <activity
            android:name=".MainActivity"
            android:exported="false" />
        <activity
            android:name=".ActivityDataBinding"
            android:exported="false" />
        <activity
            android:name="com.kiven.kutils.activityHelper.KHelperActivity"
            android:exported="false">
            <intent-filter>
                <category android:name="guidebee.intent.category.opengl.SAMPLE_CODE" />
            </intent-filter>
        </activity>
        <activity
            android:name=".dock.ActivityDock"
            android:exported="true"
            android:icon="@mipmap/ic_launcher_u"
            android:label="KUDock"
            android:theme="@style/ThemeDemo">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <!-- 设置为系统桌面 -->
                <category android:name="android.intent.category.HOME" />
                <category android:name="android.intent.category.DEFAULT" />
            </intent-filter>
        </activity>

        <activity
            android:name=".helperTest.HelperTestActivity"
            android:exported="false" />

        <!-- x5: 该Service仅在TBS内核首次Dex加载时触发并执行dex2oat任务，任务完成后自动结束 -->
        <service
            android:name="com.tencent.smtt.export.external.DexClassLoaderProviderService"
            android:exported="false"
            android:label="dexopt"
            android:process=":dexopt" />

        <service
            android:name=".floatView.ServiceFloat"
            android:exported="false" />
        <service
            android:name=".cutImage.CutScreenService"
            android:foregroundServiceType="mediaProjection"
            android:enabled="true"
            android:exported="true" />
        <service
            android:name=".service.LiveWallpaper"
            android:enabled="true"
            android:exported="true"
            android:icon="@mipmap/ic_launcher"
            android:label="@string/paper_name"
            android:permission="android.permission.BIND_WALLPAPER">
            <intent-filter>
                <action android:name="android.service.wallpaper.WallpaperService" />
            </intent-filter>

            <meta-data
                android:name="android.service.wallpaper"
                android:resource="@xml/my_wallpaper" />
        </service>
        <service
            android:name=".service.LiveWallpaper2"
            android:enabled="true"
            android:exported="true"
            android:icon="@mipmap/ic_launcher"
            android:label="@string/paper_name2"
            android:permission="android.permission.BIND_WALLPAPER"
            android:process=":remote">
            <intent-filter>
                <action android:name="android.service.wallpaper.WallpaperService" />
            </intent-filter>

            <meta-data
                android:name="android.service.wallpaper"
                android:resource="@xml/my_wallpaper" />
        </service>

        <service
            android:name=".service.MyGLWallpaperService"
            android:enabled="true"
            android:exported="true"
            android:icon="@mipmap/ic_launcher"
            android:label="@string/paper_name"
            android:permission="android.permission.BIND_WALLPAPER">
            <intent-filter>
                <action android:name="android.service.wallpaper.WallpaperService" />
            </intent-filter>

            <meta-data
                android:name="android.service.wallpaper"
                android:resource="@xml/my_wallpaper" />
        </service>

        <service
            android:name=".service.LiveGLWallpaper"
            android:enabled="true"
            android:exported="true"
            android:icon="@mipmap/ic_launcher"
            android:label="@string/paper_name"
            android:permission="android.permission.BIND_WALLPAPER">
            <intent-filter>
                <action android:name="android.service.wallpaper.WallpaperService" />
            </intent-filter>

            <meta-data
                android:name="android.service.wallpaper"
                android:resource="@xml/my_wallpaper" />
        </service>

        <!-- 无障碍功能 -->
        <service
            android:name=".autoService.AutoInstallService"
            android:exported="false"
            android:label="无障碍助手【KUSample】"
            android:permission="android.permission.BIND_ACCESSIBILITY_SERVICE">
            <intent-filter>
                <action android:name="android.accessibilityservice.AccessibilityService" />
            </intent-filter>

            <!-- 在xml文件配置辅助功能,也可在onServiceConnected()中使用setServiceInfo()动态配置 -->
            <meta-data
                android:name="android.accessibilityservice"
                android:resource="@xml/accessibility_config" />
        </service>
        <service
            android:name=".noti.MyNotificationListenerService"
            android:exported="false"
            android:label="KUtils监控通知"
            android:permission="android.permission.BIND_NOTIFICATION_LISTENER_SERVICE">
            <intent-filter>
                <action android:name="android.service.notification.NotificationListenerService" />
            </intent-filter>
        </service>

        <activity
            android:name="com.kiven.kutils.activityHelper.KFragmentActivity"
            android:exported="false" />

        <provider
            android:name="androidx.core.content.FileProvider"
            android:authorities="com.kiven.sample.fileprovider"
            android:exported="false"
            android:grantUriPermissions="true">
            <meta-data
                android:name="android.support.FILE_PROVIDER_PATHS"
                android:resource="@xml/filepaths" />
        </provider> <!-- widget start -->
        <activity
            android:name=".widget.ConfigureWidget"
            android:exported="false">
            <intent-filter>
                <action android:name="android.appwidget.action.APPWIDGET_CONFIGURE" />
            </intent-filter>
        </activity>

        <receiver
            android:name=".widget.ProviderWidget"
            android:exported="false">
            <intent-filter>
                <action android:name="android.appwidget.action.APPWIDGET_UPDATE" />
            </intent-filter>

            <meta-data
                android:name="android.appwidget.provider"
                android:resource="@xml/widget_info" />
        </receiver>

        <provider
            android:name=".MySliceProvider"
            android:authorities="com.kiven.sample"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.VIEW" />

                <category android:name="android.app.slice.category.SLICE" />
                <!--
                    <data
                    android:host="ksample.kiven.com"
                    android:pathPrefix="/slice"
                    android:scheme="http" />
                -->
            </intent-filter>
        </provider>

        <!-- vpn -->
        <service
            android:name=".vpn.MyVPNService"
            android:exported="false"
            android:permission="android.permission.BIND_VPN_SERVICE">
            <intent-filter>
                <action android:name="android.net.VpnService" />
            </intent-filter>
            <meta-data
                android:name="android.net.VpnService.SUPPORTS_ALWAYS_ON"
                android:value="false" />
        </service>
        <service
            android:name=".vpn.ToyVpnService"
            android:exported="false"
            android:permission="android.permission.BIND_VPN_SERVICE">
            <intent-filter>
                <action android:name="android.net.VpnService" />
            </intent-filter>
            <meta-data
                android:name="android.net.VpnService.SUPPORTS_ALWAYS_ON"
                android:value="false" />
        </service>
        <!-- TileService -->
        <service
            android:name=".service.MyTileService"
            android:exported="false"
            android:icon="@drawable/ic_vpn"
            android:label="kiven"
            android:permission="android.permission.BIND_QUICK_SETTINGS_TILE">
            <intent-filter>
                <action android:name="android.service.quicksettings.action.QS_TILE" />
            </intent-filter>
        </service>

        <!-- 保活任务 -->
        <service
            android:name=".service.PersistentService"
            android:enabled="true"
            android:exported="true"
            android:persistent="true"
            android:priority="1000"
            android:visibleToInstantApps="true">

        </service>
        <!-- 周期任务帮助 保活任务 -->
        <service
            android:name=".service.PersistentJobService"
            android:exported="false"
            android:permission="android.permission.BIND_JOB_SERVICE" />

        <receiver
            android:name=".service.PersistentReceiver"
            android:enabled="true"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.BOOT_COMPLETED" />
                <action android:name="android.intent.action.ACTION_PACKAGE_ADDED" />
                <action android:name="android.intent.action.ACTION_PACKAGE_REPLACED" />
                <action android:name="android.intent.action.ACTION_PACKAGE_CHANGED" />
                <action android:name="android.intent.action.ACTION_PACKAGE_REMOVED" />
                <action android:name="android.intent.action.ACTION_PACKAGE_RESTARTED" />
            </intent-filter>
        </receiver>


        <!-- 华为推送 -->
        <!--<service
            android:name="com.kiven.pushlibrary.hw.HuaWeiPushService"
            android:exported="false">
            <intent-filter>
                <action android:name="com.huawei.push.action.MESSAGING_EVENT" />
            </intent-filter>
        </service>-->

        <!-- vivo推送 -->
        <!--<service
            android:name="com.vivo.push.sdk.service.CommandClientService"
            android:exported="true"/>

        <receiver android:name="com.kiven.pushlibrary.vivo.VivoPushReceiver">
            <intent-filter>
                <action   android:name="com.vivo.pushclient.action.RECEIVE" />
            </intent-filter>
        </receiver>-->

        <!--Vivo Push开放平台中应用的appid 和api key-->
        <meta-data
            android:name="com.vivo.push.api_key"
            android:value="xxx" />

        <meta-data
            android:name="com.vivo.push.app_id"
            android:value="0" />

        <!-- 小米AppID和AppKey，在前边加个'MI'。纯数字会导致系统获取失败，测试时拿到的就是浮点数 -->
        <meta-data
            android:name="mi_app_id"
            android:value="MI2882303761518292808" />

        <meta-data
            android:name="mi_app_key"
            android:value="MI5681829285808" />

        <!-- oppo -->
        <meta-data
            android:name="oppo_app_key"
            android:value="09e71d4db52046768cf431af43f11579" />

        <meta-data
            android:name="oppo_app_secret"
            android:value="a1b2d2c0564d46e3b5319241bdeba7c1" />

        <!--firebase-->
        <meta-data
            android:name="firebase_push_enable"
            android:value="false" />
        <!-- 华为 -->
        <!--<meta-data
            android:name="hms_push_enable"
            android:value="false" />-->

        <!--<meta-data
            android:name="default_push_mi_or_firebase_or_none"
            android:value="firebase" />-->
    </application>

</manifest>